{"version":3,"file":"module.js","sources":["../../src/ts/constants.ts","../../src/ts/dataModel/genericData/dice.ts","../../src/ts/dataModel/systemData/genericSystemData.ts","../../src/ts/dataModel/systemData/systemDataFactory.ts","../../src/ts/dataModel/player.ts","../../src/ts/dataModel/dataModel.ts","../../src/ts/ui/forms/GenericForm.ts","../../src/ts/ui/sceneControls/sceneControlTools.ts","../../src/ts/ui/sceneControls/sceneControls.ts","../../src/ts/module.ts"],"sourcesContent":["import { id } from \"../module.json\";\r\n\r\nexport const moduleId = id;\r\n\r\nexport const NUM_DIE_TYPES = 11;\r\nexport enum DIE_TYPE {\r\n    UNKNOWN = 0,\r\n    D2,\r\n    D3,\r\n    D4,\r\n    D6,\r\n    D8,\r\n    D10,\r\n    D12,\r\n    D20,\r\n    D50,\r\n    D100,\r\n    LENGTH = 11\r\n}\r\n\r\nexport enum STREAK_DIRECTION {\r\n    UNKNOWN = 0,\r\n    DESCENDING = 1,\r\n    ASCENDING = 2,\r\n    LENGTH = 3\r\n}\r\n\r\nexport class Utils {\r\n    public static getDieMax(die_type:DIE_TYPE) :number {\r\n        switch (die_type) {\r\n            case DIE_TYPE.D2:\r\n                return 2;\r\n            case DIE_TYPE.D3:\r\n                return 3;\r\n            case DIE_TYPE.D4:\r\n                return 4;\r\n            case DIE_TYPE.D6:\r\n                return 6;\r\n            case DIE_TYPE.D8:\r\n                return 8;\r\n            case DIE_TYPE.D10:\r\n                return 10;\r\n            case DIE_TYPE.D12:\r\n                return 12;\r\n            case DIE_TYPE.D20:\r\n                return 20;\r\n            case DIE_TYPE.D50:\r\n                return 50;\r\n            case DIE_TYPE.D100:\r\n                return 100;\r\n        \r\n            default:\r\n                return 0\r\n        }\r\n    }\r\n\r\n    public static getDieAverage(die_type: DIE_TYPE): number{\r\n        switch(die_type){\r\n            case DIE_TYPE.D2:\r\n                return 1.5;\r\n            case DIE_TYPE.D3:\r\n                return 2;\r\n            case DIE_TYPE.D4:\r\n                return 2.5;\r\n            case DIE_TYPE.D6:\r\n                return 3.5;\r\n            case DIE_TYPE.D8:\r\n                return 4.5;\r\n            case DIE_TYPE.D10:\r\n                return 5.5;\r\n            case DIE_TYPE.D12:\r\n                return 6.5;\r\n            case DIE_TYPE.D20:\r\n                return 10.5;\r\n            case DIE_TYPE.D50:\r\n                return 25.5\r\n            case DIE_TYPE.D100:\r\n                return 50.5;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public static dsLogError(err_string:string){\r\n        console.log(\"DICE-STATS ERROR: \"+err_string)\r\n    }\r\n}","import { NUM_DIE_TYPES, DIE_TYPE, STREAK_DIRECTION, Utils } from \"../../constants\";\r\n/**\r\n * NAME: DieInfo\r\n * DESC: \r\n *  System Agnostic storage for dice info\r\n *  - Die rolls are stored in array thats the size of die\r\n *  - Allows static size of storage and just increment position in array for number of rolls\r\n * EX: \r\n *  D20 roll was 16 -> Rolls[(16-1)]++;\r\n */\r\nexport class DieInfo {\r\n    type: DIE_TYPE =    DIE_TYPE.UNKNOWN;   // {int}    Type of die <DIE_TYPE> varable\r\n    max: number =       0;                  // {int}    MAX Value On Die , ex 6 for d6, 10 for d10, 12, 20\r\n\r\n    rolledValue = -1;                       // {int}    Last rolled value on Die\r\n\r\n    totalRolls:number =     0;              // {int}    Total number of rolls made\r\n    rolls: number[] =       [];             // {int[] 1d array}  Size of die to track number of times each value was rolled on the die \r\n\r\n    mean:number =       0.0;                // {Double} Average\r\n    median: number =    0;                  // {int}    Middle accourances wise \r\n    mode: number =      0;                  // {int}    Most Common\r\n\r\n    streakDir: STREAK_DIRECTION =  STREAK_DIRECTION.UNKNOWN;       // {DS_GLOBALS.STREAK_DIRECTION} 0=UNKNOWN, 1 = desending, 2 = ascending\r\n    streakSize: number =   -1;      // {int}    Number of incrementing or decrementing rolls\r\n    streakInit: number =   -1;      // {int}    Starting value for streak\r\n\r\n    longestStreakDir: STREAK_DIRECTION =    STREAK_DIRECTION.UNKNOWN;       // {DS_GLOBALS.STREAK_DIRECTION} 0=UNKNOWN, 1 = desending, 2 = ascending\r\n    longestStreakSize: number =   -1;      // {int}    Number of incrementing or decrementing rolls\r\n    longestStreakInit: number =   -1;      // {int}    Starting value for streak\r\n\r\n    /**\r\n     * Constructor should be private and only called by the static fn above\r\n     */\r\n    constructor(die_type: DIE_TYPE){\r\n        this.type =          die_type;                          // {int}    Type of die <DIE_TYPE> varable\r\n        this.max =           Utils.getDieMax(die_type);         // {int}    MAX Value On Die , ex 6 for d6, 10 for d10, 12, 20\r\n        this.rolls = new Array(this.max+1)                      // Add 1 to include 0 as option and not req index adjustment from roll value\r\n\r\n        this.clear()\r\n    }\r\n\r\n    /**\r\n     * DESC:\r\n     *  Reset stored values\r\n     *  - Don't rest max die result and die type\r\n     */\r\n    clear(){\r\n        // Dont change die type and die max on clear\r\n        // type = DieInfo.DIE_TYPE.UNKNOWN;\r\n        // max = 0;\r\n\r\n        this.totalRolls =   0;      // {int}    Total number of rolls made\r\n        this.rolls.fill(0);       // {int[]}  Size of die to track number of times each value was rolled on the die \r\n\r\n        this.mean =      0.0;    // {Double} Average\r\n        this.median =    0;      // {int}    Middle accourances wise \r\n        this.mode =      0;      // {int}    Most Common\r\n\r\n        this.streakDir =    STREAK_DIRECTION.UNKNOWN;       // {DS_GLOBALS.STREAK_DIRECTION} 0=UNKNOWN, 1 = desending, 2 = ascending\r\n        this.streakSize =   -1;      // {int}    Number of incrementing or decrementing rolls\r\n        this.streakInit =   -1;      // {int}    Starting value for streak\r\n\r\n        this.longestStreakDir =    STREAK_DIRECTION.UNKNOWN;       // {DS_GLOBALS.STREAK_DIRECTION} 0=UNKNOWN, 1 = desending, 2 = ascending\r\n        this.longestStreakSize =   -1;      // {int}    Number of incrementing or decrementing rolls\r\n        this.longestStreakInit =   -1;      // {int}    Starting value for streak\r\n    }\r\n\r\n    /**\r\n     * DESC: Add an existing Die info object into this one.\r\n     *  Adds all roll values and overrides streaks if they're bigger than saved streaks\r\n     *  Does not recalculate math funtions.\r\n     * @param {DieInfo} die_info \r\n     */\r\n    addDieInfo(die_info:DieInfo, hasStreakInfo=false, hasSingleRoll = false){\r\n        // Adding a singled rolled value to storage\r\n        if (hasSingleRoll && die_info.type == this.type && die_info.rolledValue > -1 && die_info.rolledValue <= this.max){\r\n            this.addNewRoll(die_info.rolledValue)\r\n        // Adding a die with multiple rolls to storage \r\n        }else if (die_info.type == this.type && die_info.max == this.max){\r\n\r\n            // -- Add roll values --\r\n            this.totalRolls +=   die_info.totalRolls;\r\n            for (var roll_value=0; roll_value<this.max; roll_value++){\r\n                this.rolls[roll_value] += die_info.rolls[roll_value]\r\n            }\r\n\r\n            // Only need to calc mean median and mode when displaying data. Dont recalc here\r\n            // mean =      0.0;    // {Double} Average\r\n            // median =    0;      // {int}    Middle accourances wise \r\n            // mode =      0;      // {int}    Most Common\r\n\r\n            // -- Add Streak info --\r\n            if (hasStreakInfo){\r\n                // Take streak if its longer than current streak\r\n                if (die_info.streakSize > this.streakSize){\r\n                    this.streakDir = die_info.streakDir;\r\n                    this.streakInit = die_info.streakInit;\r\n                    this.streakSize = die_info.streakSize;\r\n                }\r\n\r\n                // Take longest streak info if its longer than current\r\n                if (die_info.longestStreakSize > this.longestStreakSize){\r\n                    this.longestStreakSize = die_info.longestStreakSize;\r\n                    this.longestStreakSize = die_info.longestStreakSize;\r\n                    this.longestStreakSize = die_info.longestStreakSize;\r\n                }\r\n            }\r\n        }else{\r\n            Utils.dsLogError(\"Failed to add \"+die_info+\" to \"+this)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * DESC: Add raw roll value\r\n     * @param {int} roll_value \r\n     */\r\n    addNewRoll(roll_value:number){\r\n        // ---- Add roll to array of roll values ----\r\n        this.rolls[roll_value]++;\r\n\r\n        // ---- Check Streaks ----\r\n        // If first streak then always save\r\n        if (this.streakSize < 1){\r\n            this.streakSize = 1;\r\n            this.streakInit = roll_value;\r\n            this.streakDir = STREAK_DIRECTION.UNKNOWN\r\n        }else{\r\n            // See if roll is next expected value\r\n            if ( (this.streakDir == STREAK_DIRECTION.UNKNOWN || this.streakDir == STREAK_DIRECTION.ASCENDING) && roll_value == this.streakInit+this.streakSize){\r\n                this.streakDir = STREAK_DIRECTION.ASCENDING\r\n                this.streakSize++\r\n\r\n            }else if( (this.streakDir == STREAK_DIRECTION.UNKNOWN || this.streakDir == STREAK_DIRECTION.DESCENDING) && roll_value == this.streakInit-this.streakSize){\r\n                this.streakDir = STREAK_DIRECTION.DESCENDING\r\n                this.streakSize++\r\n            }else{\r\n                // Set current value as begining of streak\r\n                this.streakDir = STREAK_DIRECTION.UNKNOWN\r\n                this.streakSize = 1\r\n                this.streakInit = roll_value\r\n            }\r\n\r\n            // If streak is longest, save to longest streak\r\n            if (this.streakSize > this.longestStreakSize){\r\n                this.longestStreakDir = this.streakDir\r\n                this.longestStreakInit = this.streakInit\r\n                this.longestStreakSize = this.streakSize\r\n            }\r\n        }\r\n    }\r\n\r\n    // ====== Calculations with Local Data ======\r\n    calculateTotalRolls(){\r\n        var total = 0;\r\n        for (let value of this.rolls){\r\n            total += value;\r\n        }\r\n        return total\r\n    }\r\n\r\n    // Calculate average\r\n    calculateMean(){\r\n        if(!this.rolls || this.rolls.length == 0 )\r\n        {return 0}\r\n\r\n        var numberOfRolls=0;\r\n        var sum = 0;\r\n\r\n        //For every elm in array\r\n        //Sum = Arrayindex+1(die Roll) * array value(number of times value was rolled)\r\n        for(let i=0; i<this.rolls.length; i++){\r\n            numberOfRolls += this.rolls[i];\r\n            sum = sum+((i+1)*this.rolls[i]);\r\n        }\r\n\r\n        if(numberOfRolls>0)\r\n        {\r\n            let float = sum/numberOfRolls;\r\n            return float.toFixed(2);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // Calculate middle number (Equal number rolled higher and lower than this value)\r\n    calculateMedian(){\r\n        if(!this.rolls || this.rolls.length == 0 )\r\n        {return 0}\r\n\r\n        let totalRolls = 0;\r\n        for(let i=0; i<this.rolls.length; i++){\r\n            totalRolls += this.rolls[i];\r\n        }\r\n\r\n        if(totalRolls > 1){\r\n            //Get Middle roll number\r\n            let middleIndex = 0;\r\n            if(totalRolls%2 === 0){\r\n                //Even Number of rolls\r\n                middleIndex = Math.floor(totalRolls/2);\r\n            }else{\r\n                //Odd Number of rolls\r\n                middleIndex = Math.floor(totalRolls/2)+1;\r\n            }\r\n\r\n            for(let i=0; i<this.rolls.length; i++){\r\n                var indxlValue = this.rolls[i]; //Number of that roll (i+1) is die number\r\n                while(indxlValue!=0 && middleIndex!=0){\r\n                    middleIndex--;\r\n                    indxlValue--;\r\n                }\r\n\r\n                if(middleIndex===0){\r\n                    return i+1; //index+1 = die number\r\n                }\r\n            }\r\n\r\n        }else if(totalRolls === 1){\r\n            for(let i=0; i<this.rolls.length; i++){\r\n                if(this.rolls[i] === 1){\r\n                    return i+1;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // Calculate most common number\r\n    calculateMode(){\r\n        if(!this.rolls || this.rolls.length == 0 )\r\n        {return 0}\r\n        \r\n        var indexOfMax = 0;\r\n        var maxValue = 0;\r\n\r\n        for(let i=0; i<this.rolls.length; i++){\r\n            if(this.rolls[i] > maxValue){\r\n                indexOfMax = i;\r\n                maxValue = this.rolls[i];\r\n            }\r\n        }\r\n\r\n        return indexOfMax+1;\r\n    }\r\n\r\n    public static createDieInfoAry(){\r\n        var diceAry = new Array(NUM_DIE_TYPES);\r\n        for (var die_type=0; die_type<NUM_DIE_TYPES; die_type++){\r\n            diceAry[die_type] = new DieInfo(die_type)\r\n        }\r\n        return diceAry;\r\n    }\r\n}","export class GenericSystemData {\r\n    DEGREE_SUCCESS = {}; // Overwritten On System Info\r\n\r\n    system_id:string = '';\r\n\r\n    /* Reformat local data info something handlebars can handle. Handlebars doesn't work well with 2d info \r\n            TODO: Should the form just handle this?*/\r\n    public getDisplayData(){\r\n    }\r\n\r\n    public addSystemData(system_info:GenericSystemData){\r\n    }\r\n\r\n    public parseRollMessage(message_obj:any){\r\n    }\r\n\r\n    public clear(){\r\n        \r\n    }\r\n}","import { GenericSystemData } from \"./genericSystemData\";\r\n\r\nexport class SystemDataFactory {\r\n    public static createSystemData(system_id: string) {\r\n        switch (system_id) {\r\n            case 'pf2e':\r\n                return new GenericSystemData()\r\n        \r\n            default:\r\n                return new GenericSystemData()\r\n        }\r\n    }\r\n}","import { DieInfo } from \"./genericData/dice.js\";\r\nimport { GenericSystemData } from \"./systemData/genericSystemData.js\";\r\nimport { SystemDataFactory } from \"./systemData/systemDataFactory.js\";\r\nimport { DIE_TYPE } from \"../constants.js\";\r\n\r\n/**\r\n * DESC: \r\n *  Class that defines a player. Players are all connected people to server including gm\r\n *  Players hold system agnostic info (DiceInfo) and System Specific info (SystemInfo)\r\n */\r\nexport class DiceStatsPlayer {\r\n\r\n    _userId:string = '';            // {string} - Unique player id\r\n    _userName:string = '';          // {string} - Readable Name\r\n    _isGm:boolean = false;          // {bool} - Is the player a GM\r\n\r\n    _playerForm = 0;                // {Tabbed Dice Stats Player Form Obj}\r\n\r\n    _diceInfo:DieInfo[];            // {DieInfo[]}\r\n    _systemInfo:GenericSystemData;     // System Specific Data (Different class onject depending on the system were in)\r\n\r\n    /**\r\n     * Create Player Object\r\n     * @param {string} in_user_id - The unique user id\r\n     * @param {string} in_user_name - the Readable username\r\n     * @param {boolean} in_is_gm - Is the player a GM\r\n     * @param {string} system_id - System specific id ex: dnd5e or pf2e\r\n     */\r\n    constructor(in_user_id:string, in_user_name:string, in_is_gm:boolean, system_id:string){\r\n        this._userId = in_user_id;\r\n        this._userName = in_user_name;\r\n        this._isGm = in_is_gm;\r\n        \r\n        this._diceInfo = DieInfo.createDieInfoAry()\r\n        this._systemInfo = SystemDataFactory.createSystemData(system_id)\r\n    }\r\n\r\n    // ====== Getters & Setters ======\r\n    getUsername(){return this._userName}\r\n    getUserID(){return this._userId}\r\n    getIsGm(){return this._isGm}\r\n\r\n    /**\r\n     * @param {string} in_user_name \r\n     */\r\n    setUsername(in_user_name:string){this._userName = in_user_name}\r\n    /**\r\n     * @param {string} in_user_id \r\n     */\r\n    setUserID(in_user_id:string){this._userId = in_user_id}\r\n    /**\r\n     * @param {boolean} in_is_gm \r\n     */\r\n    setIsGm(in_is_gm:boolean){this._isGm = in_is_gm}\r\n\r\n    // ====== Public Funtions ======\r\n\r\n    // ---- Clear all dice, Roll, and system Data ----\r\n    clearAllData(){\r\n        this.clearAllDiceData()\r\n        this._systemInfo.clear()\r\n        \r\n    }\r\n\r\n    // ---- System Funtions ----\r\n    clearSystemData(){\r\n        this._systemInfo.clear()\r\n    }\r\n    addSystemData(system_info:GenericSystemData){\r\n        this._systemInfo.addSystemData(system_info)\r\n    }\r\n\r\n    // ---- Dice Functions ---- \r\n    clearAllDiceData(){\r\n        for (let die of this._diceInfo){\r\n            die.clear()\r\n        }\r\n    }\r\n    clearDieData(die_type:DIE_TYPE){\r\n        this._diceInfo[die_type]?.clear()\r\n    }\r\n    addDieData(die_info:DieInfo){\r\n        this._diceInfo[die_info.type].addDieInfo(die_info)\r\n    }\r\n    addRollData(roll_value:number, die_type:DIE_TYPE){\r\n        this._diceInfo[die_type].addNewRoll(roll_value)\r\n    }\r\n\r\n    // ---- Player Form Functions ----\r\n    openPlayerForm(){\r\n        //this._playerForm.render(true)\r\n    }\r\n\r\n}","import { DIE_TYPE } from \"../constants\";\r\nimport { DiceStatsPlayer } from \"./player\";\r\n\r\n/* Create a singleton DataModel Class */\r\nexport class DiceStatsDataModel {\r\n    private static _instance: DiceStatsDataModel;\r\n\r\n    static getInstance(): DiceStatsDataModel {\r\n        if (!DiceStatsDataModel._instance || DiceStatsDataModel._instance == undefined) {\r\n            DiceStatsDataModel._instance = new DiceStatsDataModel();\r\n        }\r\n        return DiceStatsDataModel._instance;\r\n    }\r\n\r\n    private constructor() {\r\n        // Private to prevent direct instantiation\r\n\r\n        // TODO: Create Form Objects\r\n        this._globalForm = {}\r\n        this._compareForm = {}\r\n        this._importExportForm = {}\r\n        this._settingsForm = {}\r\n        // Create Player Map\r\n    }\r\n\r\n    public loadPlayers(){\r\n        let UsersAry = (game as Game)?.users\r\n        let systemId = (game as Game).system.id\r\n        if (UsersAry) {\r\n            for (var user of UsersAry){\r\n                let playerObj = new DiceStatsPlayer(user._id, user.name, user.isGM, systemId);\r\n\r\n                this.diceStatsPlayerMap.set(user.name, playerObj);\r\n                this.diceStatsPlayerMap.set(user._id, playerObj);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isPaused = false;\r\n    private _globalForm;\r\n    private _compareForm;\r\n    private _importExportForm;\r\n    private _settingsForm;\r\n\r\n    /* Player forms are saved in the player specifc objects */\r\n    /* Map: [PlayerName | UserID] => [DiceStatsPlayer Info] */\r\n    diceStatsPlayerMap: Map< string|number, DiceStatsPlayer> = new Map< string|number, DiceStatsPlayer>();\r\n\r\n    // Parse Foundry Message Object\r\n    public parseRollMessage(message: any){\r\n        // Is msg roll?\r\n        // Get Player Associated With msg\r\n        // Parse System Data\r\n        // Parse Generic Data\r\n    }\r\n\r\n    /* ================= API FN's ==================== */\r\n    public saveRollValue(player_id:string, die_type:DIE_TYPE, die_value:number){\r\n        if (this._isPaused){\r\n            return\r\n        }\r\n\r\n        var playerObj = this.diceStatsPlayerMap.get(player_id);\r\n        playerObj?.addRollData(die_value, die_type)\r\n    }\r\n\r\n    public openGlobalForm(isGM: boolean = false){\r\n        //this._globalForm?.render(true)\r\n    }\r\n\r\n    public openCompareForm(isGM: boolean = false){\r\n        //this._compareForm?.render(true)\r\n    }\r\n\r\n    public openImportExportForm(isGM: boolean = false){\r\n        //this._importExportForm.render(true)\r\n    }\r\n\r\n    public openSettingsForm(isGM: boolean = false){\r\n        var loc_game: Game = game as Game\r\n        loc_game.user?.isGM\r\n        loc_game.i18n?.localize('')\r\n        //this._settingsForm.render(true)\r\n    }\r\n\r\n    public openPlayerForm(player_id:string=\"\", player_name=\"\", isGM: boolean = false){\r\n        if(player_id){\r\n            this.diceStatsPlayerMap.get(player_id)?.openPlayerForm()\r\n        }else if(player_name){\r\n            this.diceStatsPlayerMap.get(player_name)?.openPlayerForm()\r\n        }\r\n    }\r\n\r\n    public changePauseState(isGM: boolean = false){\r\n        this._isPaused = !this._isPaused;\r\n        return this._isPaused;\r\n    }\r\n    \r\n    public getIsPaused(){\r\n        return this._isPaused;\r\n    }\r\n\r\n}","// declare class ApplicationV2 {\r\n//     element:any\r\n// }\r\n\r\n/**\r\n * Migrating to app V2:\r\n * https://foundryvtt.wiki/en/development/api/applicationv2\r\n * https://foundryvtt.wiki/en/development/guides/converting-to-appv2\r\n */\r\n\r\nconst { ApplicationV2, DocumentSheetV2, HandlebarsApplicationMixin } = foundry.applications.api\r\n\r\nexport class MyGenericApplication extends HandlebarsApplicationMixin(ApplicationV2) {\r\n    constructor(options = {}){\r\n        super(options)\r\n    }\r\n\r\n    static override DEFAULT_OPTIONS:any = {\r\n        tag: \"form\",\r\n        form: {\r\n            handler: MyGenericApplication.#onSubmit,\r\n            submitOnChange: false,\r\n            closeOnSubmit: false\r\n        },\r\n        position: { \r\n            width: 600 ,\r\n            height: 400\r\n        }\r\n    }\r\n\r\n    override get title() {\r\n        return `My Module: Dice Stats Module`;\r\n    }\r\n\r\n    static override PARTS = {\r\n        form: {\r\n          template: 'modules/dice-stats/templates/genericTemplate.hbs'\r\n        }\r\n    }\r\n\r\n    // getData(options) replacement\r\n    override async _prepareContext(options:any) {\r\n        const context:any = {};\r\n\r\n        // Be mindful of mutating other objects in memory when you enrich\r\n        context.customHeading = \"WOJO's Custom Heading\";\r\n\r\n        return context;\r\n    }\r\n\r\n    override _onRender(context:any, options:any): any {\r\n        this.element.querySelector(\"input[name=GenBtn]\")?.addEventListener(\"click\", MyGenericApplication.refresh);\r\n    }\r\n\r\n    static async refresh(){\r\n        await console.log(\"Dice Stats GenericApp On Refresh\");\r\n    }\r\n\r\n    static async #onSubmit(event:any, form:any, formData:any) {\r\n        // const settings = foundry.utils.expandObject(formData.object);\r\n        // await Promise.all(\r\n        //     Object.entries(settings)\r\n        //         .map(([key, value]) => (game as Game).settings.set(\"foo\", key, value))\r\n        // );\r\n        console.log(\"Dice Stats GenericApp On Submit!\");\r\n    }\r\n\r\n    // override _renderHTML(context:any, options:any): any{\r\n    //     super._renderHTML(context, options);\r\n    // }\r\n\r\n    // override _replaceHTML(result:any, context:any, options:any): any{\r\n    //     super._replaceHTML(result, context, options);\r\n    // }\r\n}","import { DiceStatsDataModel } from \"../../dataModel/dataModel\";\r\nimport { MyGenericApplication } from \"../forms/GenericForm\";\r\n\r\nexport class CustomSceneControlToolSettings implements SceneControls.ToolNoToggle\r\n{\r\n    name = (game as Game).i18n?.localize('DiceStats.SceneControls.Settings.Name') ?? '';\r\n    title = (game as Game).i18n?.localize('DiceStats.SceneControls.Settings.Title') ?? '';\r\n    icon = 'fa-solid fa-gears';\r\n    order= 0;\r\n\r\n    visible= true;\r\n    active= false;\r\n    button= true;\r\n\r\n    async onChange(event:any, active:any){\r\n        DiceStatsDataModel.getInstance().openSettingsForm(true)\r\n        new MyGenericApplication().render()\r\n    }\r\n\r\n    constructor(){}\r\n    // TODO: Add pause and export functionalities to settings form\r\n    // Give desc of other settings info (Change icon setting here?)\r\n}\r\n\r\n// Global Scene Control Icon \r\nexport class CustomSceneControlToolGlobal implements SceneControls.ToolNoToggle\r\n{\r\n    active= false;\r\n    button= true;\r\n\r\n    name = (game as Game).i18n?.localize('DiceStats.SceneControls.GlobalStats.Name') ?? '';\r\n    title = (game as Game).i18n?.localize('DiceStats.SceneControls.GlobalStats.Title') ?? '';\r\n    icon = 'fa-solid fa-earth-americas';\r\n    order= 0;\r\n\r\n    visible= true;\r\n\r\n    async onChange(event:any, active:any){\r\n        DiceStatsDataModel.getInstance().openGlobalForm()\r\n    }\r\n    constructor(){}\r\n}\r\n\r\n// Compare Scene Control Icon\r\nexport class CustomSceneControlToolCompare implements SceneControls.ToolNoToggle\r\n{\r\n    active= false;\r\n    button= true;\r\n\r\n    name = (game as Game).i18n?.localize('DiceStats.SceneControls.CompareStats.Name') ?? '';\r\n    title = (game as Game).i18n?.localize('DiceStats.SceneControls.CompareStats.Title') ?? '';\r\n    icon = 'fa-solid fa-users-line';\r\n    order= 0;\r\n\r\n    visible= true;\r\n\r\n    async onChange(event:any, active:any){\r\n        DiceStatsDataModel.getInstance().openCompareForm()\r\n    }\r\n\r\n    constructor(){}\r\n}\r\n\r\n// Player Scene Control Icons (Icon can be customized in settings)\r\nexport class CustomSceneControlToolPlayer implements SceneControls.ToolNoToggle\r\n{\r\n    static app: MyGenericApplication|undefined = undefined\r\n    active = false;\r\n    button = true;\r\n    icon = '';\r\n    name = '';\r\n    order = 0;\r\n    title = '';\r\n    visible = true;\r\n    associatedPlayerId = \"\";\r\n\r\n    async onChange(event:any, active:any){\r\n        // DiceStatsDataModel.getInstance().openPlayerForm(this.associatedPlayerId);\r\n\r\n        if (CustomSceneControlToolPlayer.app == undefined){\r\n            CustomSceneControlToolPlayer.app = new MyGenericApplication()\r\n        }\r\n        CustomSceneControlToolPlayer.app.render(true)\r\n        CustomSceneControlToolPlayer.app.bringToFront()\r\n        CustomSceneControlToolPlayer.app.maximize()\r\n    }\r\n\r\n    constructor(player_name:string, player_id:string, player_icon:string){\r\n        var isGM = (game as Game)?.users?.get(player_id)?.isGM ?? false;\r\n\r\n        this.name = player_name+'_name';\r\n        this.title = player_name;\r\n        this.associatedPlayerId = player_id;\r\n        if (isGM){\r\n            this.icon = 'fa-solid fa-book-open-reader'\r\n        }else if(player_icon){\r\n            this.icon = player_icon;\r\n        }else{\r\n            this.icon = 'fas fa-dice-d20'\r\n        }\r\n    }\r\n}\r\n","/**\r\n * These classes use the foundry SceneControll Classes to add a new set of buttons. The buttons are used to view players\r\n * dice stats. \r\n * \r\n * Button layout it as follows\r\n *  OPEN_DICE_STATS_BUTTONS\r\n *  - PAUSE STATS BUTTON\r\n *  - GLOBAL STATS BUTTON\r\n *  - COMPARE STATS BUTTON\r\n *  - EXPORT FORM BUTTON\r\n *  - PLAYER STATS BUTTON\r\n */\r\n\r\nimport { CustomSceneControlToolSettings, CustomSceneControlToolGlobal, CustomSceneControlToolCompare, CustomSceneControlToolPlayer } from \"./sceneControlTools\";\r\n\r\n// Scene Controller outer button to view player buttons\r\nexport class CustomSceneControl extends SceneControls\r\n{\r\n    //activeTool = '';\r\n    icon = 'fas fa-dice-d20';\r\n    name = 'dice-stats';\r\n    //title = (game as Game).i18n?.localize('DiceStats.SceneControls.DiceStatsSceneControl.Title') ?? 'Dice Stats';\r\n    layer = 'diceStats';\r\n    visible = true;\r\n    tools:any = {};\r\n    order=69;\r\n\r\n    // UUID of players\r\n    constructor(player_ids: [string, string][])\r\n    {\r\n        super()\r\n        var toolCount = 0\r\n\r\n        var settingsTool = new CustomSceneControlToolSettings()\r\n        settingsTool.order = ++toolCount\r\n        this.tools[settingsTool.name] = settingsTool\r\n\r\n\r\n        var globalTool = new CustomSceneControlToolGlobal()\r\n        globalTool.order = ++toolCount\r\n        this.tools[globalTool.name] = globalTool\r\n\r\n        var compareTool = new CustomSceneControlToolCompare()\r\n        compareTool.order = ++toolCount\r\n        this.tools[compareTool.name] = compareTool\r\n\r\n        \r\n\r\n        for (var [id,name] of player_ids){\r\n            var playerTool = new CustomSceneControlToolPlayer(name,id, \"fas fa-dice-d20\")\r\n            playerTool.order = ++toolCount;\r\n\r\n            this.tools[playerTool.name] = playerTool\r\n        }\r\n    }\r\n\r\n    async onChange(event:any, active:any){\r\n\r\n    }\r\n\r\n    override get title() {\r\n        return (game as Game).i18n?.localize('DiceStats.SceneControls.DiceStatsSceneControl.Title') ?? 'Dice Stats'\r\n    }\r\n\r\n    override get activeTool() {\r\n        return \"\"\r\n    }\r\n\r\n    \r\n}","// Do not remove this import. If you do Vite will think your styles are dead\r\n// code and not include them in the build output.\r\nimport \"../styles/style.scss\";\r\n// import DogBrowser from \"./apps/dogBrowser\";\r\nimport { moduleId } from \"./constants\";\r\nimport { DiceStatsDataModel } from \"./dataModel/dataModel\";\r\nimport { CustomSceneControl } from \"./ui/sceneControls/sceneControls\";\r\n// import { MyModule } from \"./types/types\";\r\n\r\n//let module: MyModule;\r\n\r\nHooks.once('init', () => {\r\n  console.log(`Initializing ${moduleId}`);\r\n  DiceStatsDataModel.getInstance();\r\n\r\n\r\n  // module = (game as Game).modules.get(moduleId) as MyModule;\r\n  // module.dogBrowser = new DogBrowser();\r\n  });\r\n\r\nHooks.once('ready', () => {\r\n  console.log('Scene Ready, We can load player data now!')\r\n  DiceStatsDataModel.getInstance().loadPlayers()\r\n});\r\n\r\n// Hooks.on(\"renderActorDirectory\", (_: Application, html: JQuery) => {\r\n//   const button = $(\r\n//     `<button class=\"cc-sidebar-button\" type=\"button\">🐶</button>`\r\n//   );\r\n//   button.on(\"click\", () => {\r\n//     module.dogBrowser.render(true);\r\n//   });\r\n//   html.find(\".directory-header .action-buttons\").append(button);\r\n// });\r\n\r\n// Hook to interact when scenecontrols get created Method used to have a better location to access player data\r\nHooks.on(\"getSceneControlButtons\", controls => {\r\n  \r\n  let playerIds = []\r\n  let playerKeys:[string,string] = ['',''];\r\n  \r\n  let users = (game as Game).users\r\n  if (users){\r\n    for (let user of users){\r\n      playerKeys[0] = user._id;\r\n      playerKeys[1] = user.name;\r\n      playerIds.push(playerKeys)\r\n    }\r\n  }\r\n\r\n  var customSceneCtrl = new CustomSceneControl(playerIds)\r\n\r\n  let key:any = 'dice-stats'\r\n  controls[key] = customSceneCtrl\r\n  \r\n});"],"names":["moduleId","id","NUM_DIE_TYPES","DIE_TYPE","DIE_TYPE2","STREAK_DIRECTION","Utils","die_type","err_string","DieInfo","__publicField","die_info","hasStreakInfo","hasSingleRoll","roll_value","total","value","numberOfRolls","sum","i","totalRolls","middleIndex","indxlValue","indexOfMax","maxValue","diceAry","GenericSystemData","system_info","message_obj","SystemDataFactory","system_id","DiceStatsPlayer","in_user_id","in_user_name","in_is_gm","die","_a","_DiceStatsDataModel","UsersAry","systemId","user","playerObj","message","player_id","die_value","isGM","loc_game","_b","player_name","DiceStatsDataModel","ApplicationV2","DocumentSheetV2","HandlebarsApplicationMixin","_MyGenericApplication","options","context","_MyGenericApplication_static","onSubmit_fn","event","form","formData","__privateAdd","__privateMethod","MyGenericApplication","CustomSceneControlToolSettings","active","CustomSceneControlToolGlobal","CustomSceneControlToolCompare","_CustomSceneControlToolPlayer","player_icon","CustomSceneControlToolPlayer","CustomSceneControl","player_ids","toolCount","settingsTool","globalTool","compareTool","name","playerTool","controls","playerIds","playerKeys","users","customSceneCtrl","key"],"mappings":"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"}