{"version":3,"file":"module.js","sources":["../../src/ts/constants.ts","../../src/ts/dataModel/genericData/dice.ts","../../src/ts/dataModel/systemData/genericSystemData.ts","../../src/ts/dataModel/systemData/systemDataFactory.ts","../../src/ts/ui/forms/playerDataForm.ts","../../src/ts/dataModel/player.ts","../../src/ts/ui/forms/GenericForm.ts","../../src/ts/dataModel/genericData/genericDataParser.ts","../../src/ts/dataModel/dataModel.ts","../../src/ts/ui/sceneControls/sceneControlTools.ts","../../src/ts/ui/sceneControls/sceneControls.ts","../../src/ts/module.ts"],"sourcesContent":["import { id } from \"../module.json\";\n\nexport const moduleId = id;\n\nexport const NUM_DIE_TYPES = 11;\nexport enum DIE_TYPE {\n    UNKNOWN = 0,\n    D2,\n    D3,\n    D4,\n    D6,\n    D8,\n    D10,\n    D12,\n    D20,\n    D50,\n    D100,\n    LENGTH = 11\n}\n\nexport enum STREAK_DIRECTION {\n    UNKNOWN = 0,\n    DESCENDING = 1,\n    ASCENDING = 2,\n    LENGTH = 3\n}\n\nexport class Utils {\n    public static getDieMax(die_type:DIE_TYPE) :number {\n        switch (die_type) {\n            case DIE_TYPE.D2:\n                return 2;\n            case DIE_TYPE.D3:\n                return 3;\n            case DIE_TYPE.D4:\n                return 4;\n            case DIE_TYPE.D6:\n                return 6;\n            case DIE_TYPE.D8:\n                return 8;\n            case DIE_TYPE.D10:\n                return 10;\n            case DIE_TYPE.D12:\n                return 12;\n            case DIE_TYPE.D20:\n                return 20;\n            case DIE_TYPE.D50:\n                return 50;\n            case DIE_TYPE.D100:\n                return 100;\n        \n            default:\n                return 0\n        }\n    }\n\n    public static getDieAverage(die_type: DIE_TYPE): number{\n        switch(die_type){\n            case DIE_TYPE.D2:\n                return 1.5;\n            case DIE_TYPE.D3:\n                return 2;\n            case DIE_TYPE.D4:\n                return 2.5;\n            case DIE_TYPE.D6:\n                return 3.5;\n            case DIE_TYPE.D8:\n                return 4.5;\n            case DIE_TYPE.D10:\n                return 5.5;\n            case DIE_TYPE.D12:\n                return 6.5;\n            case DIE_TYPE.D20:\n                return 10.5;\n            case DIE_TYPE.D50:\n                return 25.5\n            case DIE_TYPE.D100:\n                return 50.5;\n            default:\n                return 0;\n        }\n    }\n\n    public static dsLogError(err_string:string){\n        console.log(\"DICE-STATS ERROR: \"+err_string)\n    }\n}","import { NUM_DIE_TYPES, DIE_TYPE, STREAK_DIRECTION, Utils } from \"../../constants\";\n/**\n * NAME: DieInfo\n * DESC: \n *  System Agnostic storage for dice info\n *  - Die rolls are stored in array thats the size of die\n *  - Allows static size of storage and just increment position in array for number of rolls\n * EX: \n *  D20 roll was 16 -> Rolls[(16-1)]++;\n */\nexport class DieInfo {\n    type: DIE_TYPE =    DIE_TYPE.UNKNOWN;   // {int}    Type of die <DIE_TYPE> varable\n    max: number =       0;                  // {int}    MAX Value On Die , ex 6 for d6, 10 for d10, 12, 20\n\n    rolledValue = -1;                       // {int}    Last rolled value on Die\n\n    totalRolls:number =     0;              // {int}    Total number of rolls made\n    rolls: number[] =       [];             // {int[] 1d array}  Size of die to track number of times each value was rolled on the die \n\n    mean:number =       0.0;                // {Double} Average\n    median: number =    0;                  // {int}    Middle accourances wise \n    mode: number =      0;                  // {int}    Most Common\n\n    streakDir: STREAK_DIRECTION =  STREAK_DIRECTION.UNKNOWN;       // {DS_GLOBALS.STREAK_DIRECTION} 0=UNKNOWN, 1 = desending, 2 = ascending\n    streakSize: number =   -1;      // {int}    Number of incrementing or decrementing rolls\n    streakInit: number =   -1;      // {int}    Starting value for streak\n\n    longestStreakDir: STREAK_DIRECTION =    STREAK_DIRECTION.UNKNOWN;       // {DS_GLOBALS.STREAK_DIRECTION} 0=UNKNOWN, 1 = desending, 2 = ascending\n    longestStreakSize: number =   -1;      // {int}    Number of incrementing or decrementing rolls\n    longestStreakInit: number =   -1;      // {int}    Starting value for streak\n\n    /**\n     * Constructor should be private and only called by the static fn above\n     */\n    constructor(die_type: DIE_TYPE){\n        this.type =          die_type;                          // {int}    Type of die <DIE_TYPE> varable\n        this.max =           Utils.getDieMax(die_type);         // {int}    MAX Value On Die , ex 6 for d6, 10 for d10, 12, 20\n        this.rolls = new Array(this.max+1)                      // Add 1 to include 0 as option and not req index adjustment from roll value\n\n        this.clear()\n    }\n\n    /**\n     * DESC:\n     *  Reset stored values\n     *  - Don't rest max die result and die type\n     */\n    clear(){\n        // Dont change die type and die max on clear\n        // type = DieInfo.DIE_TYPE.UNKNOWN;\n        // max = 0;\n\n        this.totalRolls =   0;      // {int}    Total number of rolls made\n        this.rolls.fill(0);       // {int[]}  Size of die to track number of times each value was rolled on the die \n\n        this.mean =      0.0;    // {Double} Average\n        this.median =    0;      // {int}    Middle accourances wise \n        this.mode =      0;      // {int}    Most Common\n\n        this.streakDir =    STREAK_DIRECTION.UNKNOWN;       // {DS_GLOBALS.STREAK_DIRECTION} 0=UNKNOWN, 1 = desending, 2 = ascending\n        this.streakSize =   -1;      // {int}    Number of incrementing or decrementing rolls\n        this.streakInit =   -1;      // {int}    Starting value for streak\n\n        this.longestStreakDir =    STREAK_DIRECTION.UNKNOWN;       // {DS_GLOBALS.STREAK_DIRECTION} 0=UNKNOWN, 1 = desending, 2 = ascending\n        this.longestStreakSize =   -1;      // {int}    Number of incrementing or decrementing rolls\n        this.longestStreakInit =   -1;      // {int}    Starting value for streak\n    }\n\n    /**\n     * DESC: Add an existing Die info object into this one.\n     *  Adds all roll values and overrides streaks if they're bigger than saved streaks\n     *  Does not recalculate math funtions.\n     * @param {DieInfo} die_info \n     */\n    addDieInfo(die_info:DieInfo, hasStreakInfo=false, hasSingleRoll = false){\n        // Adding a singled rolled value to storage\n        if (hasSingleRoll && die_info.type == this.type && die_info.rolledValue > -1 && die_info.rolledValue <= this.max){\n            this.addNewRoll(die_info.rolledValue)\n        // Adding a die with multiple rolls to storage \n        }else if (die_info.type == this.type && die_info.max == this.max){\n\n            // -- Add roll values --\n            this.totalRolls +=   die_info.totalRolls;\n            for (var roll_value=0; roll_value<this.max; roll_value++){\n                this.rolls[roll_value] += die_info.rolls[roll_value]\n            }\n\n            // Only need to calc mean median and mode when displaying data. Dont recalc here\n            // mean =      0.0;    // {Double} Average\n            // median =    0;      // {int}    Middle accourances wise \n            // mode =      0;      // {int}    Most Common\n\n            // -- Add Streak info --\n            if (hasStreakInfo){\n                // Take streak if its longer than current streak\n                if (die_info.streakSize > this.streakSize){\n                    this.streakDir = die_info.streakDir;\n                    this.streakInit = die_info.streakInit;\n                    this.streakSize = die_info.streakSize;\n                }\n\n                // Take longest streak info if its longer than current\n                if (die_info.longestStreakSize > this.longestStreakSize){\n                    this.longestStreakSize = die_info.longestStreakSize;\n                    this.longestStreakSize = die_info.longestStreakSize;\n                    this.longestStreakSize = die_info.longestStreakSize;\n                }\n            }\n        }else{\n            Utils.dsLogError(\"Failed to add \"+die_info+\" to \"+this)\n        }\n    }\n\n    /**\n     * DESC: Add raw roll value\n     * @param {int} roll_value \n     */\n    addNewRoll(roll_value:number){\n        // ---- Add roll to array of roll values ----\n        this.rolls[roll_value]++;\n\n        // ---- Check Streaks ----\n        // If first streak then always save\n        if (this.streakSize < 1){\n            this.streakSize = 1;\n            this.streakInit = roll_value;\n            this.streakDir = STREAK_DIRECTION.UNKNOWN\n        }else{\n            // See if roll is next expected value\n            if ( (this.streakDir == STREAK_DIRECTION.UNKNOWN || this.streakDir == STREAK_DIRECTION.ASCENDING) && roll_value == this.streakInit+this.streakSize){\n                this.streakDir = STREAK_DIRECTION.ASCENDING\n                this.streakSize++\n\n            }else if( (this.streakDir == STREAK_DIRECTION.UNKNOWN || this.streakDir == STREAK_DIRECTION.DESCENDING) && roll_value == this.streakInit-this.streakSize){\n                this.streakDir = STREAK_DIRECTION.DESCENDING\n                this.streakSize++\n            }else{\n                // Set current value as begining of streak\n                this.streakDir = STREAK_DIRECTION.UNKNOWN\n                this.streakSize = 1\n                this.streakInit = roll_value\n            }\n\n            // If streak is longest, save to longest streak\n            if (this.streakSize > this.longestStreakSize){\n                this.longestStreakDir = this.streakDir\n                this.longestStreakInit = this.streakInit\n                this.longestStreakSize = this.streakSize\n            }\n        }\n    }\n\n    // ====== Calculations with Local Data ======\n    calculateTotalRolls(){\n        var total = 0;\n        for (let value of this.rolls){\n            total += value;\n        }\n        return total\n    }\n\n    // Calculate average\n    calculateMean(){\n        if(!this.rolls || this.rolls.length == 0 )\n        {return 0}\n\n        var numberOfRolls=0;\n        var sum = 0;\n\n        //For every elm in array\n        //Sum = Arrayindex+1(die Roll) * array value(number of times value was rolled)\n        for(let i=0; i<this.rolls.length; i++){\n            numberOfRolls += this.rolls[i];\n            sum = sum+((i+1)*this.rolls[i]);\n        }\n\n        if(numberOfRolls>0)\n        {\n            let float = sum/numberOfRolls;\n            return float.toFixed(2);\n        }\n        return 0;\n    }\n\n    // Calculate middle number (Equal number rolled higher and lower than this value)\n    calculateMedian(){\n        if(!this.rolls || this.rolls.length == 0 )\n        {return 0}\n\n        let totalRolls = 0;\n        for(let i=0; i<this.rolls.length; i++){\n            totalRolls += this.rolls[i];\n        }\n\n        if(totalRolls > 1){\n            //Get Middle roll number\n            let middleIndex = 0;\n            if(totalRolls%2 === 0){\n                //Even Number of rolls\n                middleIndex = Math.floor(totalRolls/2);\n            }else{\n                //Odd Number of rolls\n                middleIndex = Math.floor(totalRolls/2)+1;\n            }\n\n            for(let i=0; i<this.rolls.length; i++){\n                var indxlValue = this.rolls[i]; //Number of that roll (i+1) is die number\n                while(indxlValue!=0 && middleIndex!=0){\n                    middleIndex--;\n                    indxlValue--;\n                }\n\n                if(middleIndex===0){\n                    return i+1; //index+1 = die number\n                }\n            }\n\n        }else if(totalRolls === 1){\n            for(let i=0; i<this.rolls.length; i++){\n                if(this.rolls[i] === 1){\n                    return i+1;\n                }\n            }\n        }\n        return 0;\n    }\n\n    // Calculate most common number\n    calculateMode(){\n        if(!this.rolls || this.rolls.length == 0 )\n        {return 0}\n        \n        var indexOfMax = 0;\n        var maxValue = 0;\n\n        for(let i=0; i<this.rolls.length; i++){\n            if(this.rolls[i] > maxValue){\n                indexOfMax = i;\n                maxValue = this.rolls[i];\n            }\n        }\n\n        return indexOfMax+1;\n    }\n\n    public static createDieInfoAry(){\n        var diceAry = new Array(NUM_DIE_TYPES);\n        for (var die_type=0; die_type<NUM_DIE_TYPES; die_type++){\n            diceAry[die_type] = new DieInfo(die_type)\n        }\n        return diceAry;\n    }\n    \n}","export class GenericSystemData {\n    DEGREE_SUCCESS = {}; // Overwritten On System Info\n\n    system_id:string = '';\n\n    /* Reformat local data info something handlebars can handle. Handlebars doesn't work well with 2d info \n            TODO: Should the form just handle this?*/\n    public getDisplayData(){\n    }\n\n    public addSystemData(system_info: undefined|GenericSystemData){\n        if (!system_info){\n            return;\n        }\n    }\n\n    public parseRollMessage(message_obj:any): undefined|GenericSystemData {\n        return undefined;\n    }\n\n    public clear(){\n    }\n}","import { GenericSystemData } from \"./genericSystemData\";\n\nexport class SystemDataFactory {\n    public static createSystemData(system_id: string) {\n        switch (system_id) {\n            case 'pf2e':\n                return new GenericSystemData()\n        \n            default:\n                return new GenericSystemData()\n        }\n    }\n}","// declare class ApplicationV2 {\n//     element:any\n// }\n\nimport { template } from \"handlebars\";\n\n/**\n * Migrating to app V2:\n * https://foundryvtt.wiki/en/development/api/applicationv2\n * https://foundryvtt.wiki/en/development/guides/converting-to-appv2\n */\n\nconst { ApplicationV2, DocumentSheetV2, HandlebarsApplicationMixin } = foundry.applications.api\n\nexport class PlayerDataForm extends HandlebarsApplicationMixin(ApplicationV2) {\n    associatedPlayerId = '';\n    // Default Template Locations. System templates should be overwritten when a system gets loaded\n    static templates = {\n        genericDataTab: 'modules/dice-stats/templates/player-data/tabs/generic-dice-data-tab.hbs',\n        systemChartTab: 'modules/dice-stats/templates/player-data/tabs/systemForms/unknown/unknown-system-chart-form.hbs',\n        systemDetailsTab: 'modules/dice-stats/templates/player-data/tabs/systemForms/unknown/unknown-system-data-form.hbs'\n    }\n\n    constructor(playerId:string = '', options = {}){\n        super(options)\n        this.associatedPlayerId = playerId;\n    }\n\n    static override DEFAULT_OPTIONS:any = {\n        tag: \"form\",\n        form: {\n            handler: PlayerDataForm.#onSubmit,\n            submitOnChange: false,\n            closeOnSubmit: false\n        },\n        position: { \n            width: 600 ,\n            height: 400\n        },\n    }\n\n    override get title() {\n        return `My Module: Dice Stats Module`;\n    }\n\n    static override PARTS = {\n        tabs: {\n            template: 'modules/dice-stats/templates/player-data/player-data-nav-form.hbs',\n        },\n        genericData: {\n            template: PlayerDataForm.templates.genericDataTab,\n            scrollable: ['']\n        },\n        systemCharts: {\n            template: PlayerDataForm.templates.systemChartTab,\n            scrollable: [''],\n        },\n        systemDetails: {\n            template: PlayerDataForm.templates.systemDetailsTab,\n            scrollable: [''],\n        }\n    }\n\n    // getData(options) replacement\n    override async _prepareContext(options:any) {\n        let context:any = {\n            tabGroups:{\n                primary: ''\n            }\n        };\n\n        // Set Generic Data as default selected \n        if (context.tabGroups.primary == '') {\n            context.tabGroups.primary == 'genericData';\n        }\n\n        // Get Display Data from data model\n        let myGenericDiceData = {};\n        let mySystemChartData = {};\n        let mySystemDetailsData = {};\n\n        context.tabs = {\n            genericData: {\n                cssClass: context.tabGroups.primary === 'genericData' ? 'active' : '',\n                group: 'primary',\n                id: 'genericData',\n                icon: 'fa-solid fa-dice-d20',\n                label: 'Dice Data - Label',\n                title: 'Dice Data',\n                genericData: {}\n            },\n            systemCharts: {\n                cssClass: context.tabGroups.primary === 'systemCharts' ? 'active' : '',\n                group: 'primary',\n                id: 'systemCharts',\n                icon: 'fa-solid fa-hands-holding-circle',\n                label: 'System Chart Data - Label',\n                systemCharts: {}\n            },\n            systemDetails: {\n                cssClass: context.tabGroups.primary === 'systemDetails' ? 'active' : '',\n                group: 'primary',\n                id: 'systemDetails',\n                icon: 'fa-solid fa-pen-to-square',\n                label: 'System Details Data - Label',\n                systemDetails: {}\n            }\n        }\n\n        // Be mindful of mutating other objects in memory when you enrich\n        return context;\n    }\n\n    protected override _configureRenderOptions(options: any): void {\n        super._configureRenderOptions(options);\n\n        // TODO: disable specific tabs here Depending on settings?\n        options.parts = ['tabs', 'genericData', 'systemCharts', 'systemDetails']\n    }\n\n    override _onRender(context:any, options:any): any {\n        this.element.querySelector(\"input[name=gen-btn]\")?.addEventListener(\"click\", PlayerDataForm.refresh);\n    }\n\n    static async refresh(){\n        await console.log(\"Dice Stats GenericApp On Refresh\");\n    }\n\n    static async #onSubmit(event:any, form:any, formData:any) {\n        // const settings = foundry.utils.expandObject(formData.object);\n        // await Promise.all(\n        //     Object.entries(settings)\n        //         .map(([key, value]) => (game as Game).settings.set(\"foo\", key, value))\n        // );\n        console.log(\"Dice Stats GenericApp On Submit!\");\n    }\n\n    // override _renderHTML(context:any, options:any): any{\n    //     super._renderHTML(context, options);\n    // }\n\n    // override _replaceHTML(result:any, context:any, options:any): any{\n    //     super._replaceHTML(result, context, options);\n    // }\n}","import { DieInfo } from \"./genericData/dice.js\";\nimport { GenericSystemData } from \"./systemData/genericSystemData.js\";\nimport { SystemDataFactory } from \"./systemData/systemDataFactory.js\";\nimport { DIE_TYPE } from \"../constants.js\";\nimport { PlayerDataForm } from \"../ui/forms/playerDataForm.js\";\n\n/**\n * DESC: \n *  Class that defines a player. Players are all connected people to server including gm\n *  Players hold system agnostic info (DiceInfo) and System Specific info (SystemInfo)\n */\nexport class DiceStatsPlayer {\n\n    _userId:string = '';            // {string} - Unique player id\n    _userName:string = '';          // {string} - Readable Name\n    _isGm:boolean = false;          // {bool} - Is the player a GM\n\n    _playerForm:PlayerDataForm;     // {Dice Stats Player Form Obj}\n\n    _diceInfo:DieInfo[];            // {DieInfo[]}\n    _systemInfo:GenericSystemData;     // System Specific Data (Different class onject depending on the system were in)\n\n    /**\n     * Create Player Object\n     * @param {string} in_user_id - The unique user id\n     * @param {string} in_user_name - the Readable username\n     * @param {boolean} in_is_gm - Is the player a GM\n     * @param {string} system_id - System specific id ex: dnd5e or pf2e\n     */\n    constructor(in_user_id:string, in_user_name:string, in_is_gm:boolean, system_id:string){\n        this._userId = in_user_id;\n        this._userName = in_user_name;\n        this._isGm = in_is_gm;\n        \n        this._diceInfo = DieInfo.createDieInfoAry()\n        this._systemInfo = SystemDataFactory.createSystemData(system_id)\n\n        this._playerForm = new PlayerDataForm(in_user_id, {})\n    }\n\n    // ====== Getters & Setters ======\n    getUsername(){return this._userName}\n    getUserID(){return this._userId}\n    getIsGm(){return this._isGm}\n\n    /**\n     * @param {string} in_user_name \n     */\n    setUsername(in_user_name:string){this._userName = in_user_name}\n    /**\n     * @param {string} in_user_id \n     */\n    setUserID(in_user_id:string){this._userId = in_user_id}\n    /**\n     * @param {boolean} in_is_gm \n     */\n    setIsGm(in_is_gm:boolean){this._isGm = in_is_gm}\n\n    // ====== Public Funtions ======\n    // ---- AddD Data to Player ----\n    addGenericInfo(dice_info:DieInfo[]){\n        for (let die of dice_info){\n            this._diceInfo[die.type].addDieInfo(die);\n        }\n    }\n\n    addSystemInfo(system_info:GenericSystemData|undefined){\n        if(system_info){\n            this._systemInfo.addSystemData(system_info);\n        }\n    }\n\n    // ---- Clear all dice, Roll, and system Data ----\n    clearAllData(){\n        this.clearAllDiceData()\n        this._systemInfo.clear()\n        \n    }\n\n    // ---- System Funtions ----\n    clearSystemData(){\n        this._systemInfo.clear()\n    }\n    addSystemData(system_info:GenericSystemData){\n        this._systemInfo.addSystemData(system_info)\n    }\n\n    // ---- Dice Functions ---- \n    clearAllDiceData(){\n        for (let die of this._diceInfo){\n            die.clear()\n        }\n    }\n    clearDieData(die_type:DIE_TYPE){\n        this._diceInfo[die_type]?.clear()\n    }\n    addDieData(die_info:DieInfo){\n        this._diceInfo[die_info.type].addDieInfo(die_info)\n    }\n    addRollData(roll_value:number, die_type:DIE_TYPE){\n        this._diceInfo[die_type].addNewRoll(roll_value)\n    }\n\n    // ---- Player Form Functions ----\n    openPlayerForm(){\n        this._playerForm.render(true)\n    }\n\n}","// declare class ApplicationV2 {\n//     element:any\n// }\n\n/**\n * Migrating to app V2:\n * https://foundryvtt.wiki/en/development/api/applicationv2\n * https://foundryvtt.wiki/en/development/guides/converting-to-appv2\n */\n\nconst { ApplicationV2, DocumentSheetV2, HandlebarsApplicationMixin } = foundry.applications.api\n\nexport class MyGenericApplication extends HandlebarsApplicationMixin(ApplicationV2) {\n    constructor(options = {}){\n        super(options)\n    }\n\n    static override DEFAULT_OPTIONS:any = {\n        tag: \"form\",\n        form: {\n            handler: MyGenericApplication.#onSubmit,\n            submitOnChange: false,\n            closeOnSubmit: false\n        },\n        position: { \n            width: 600 ,\n            height: 400\n        }\n    }\n\n    override get title() {\n        return `My Module: Dice Stats Module`;\n    }\n\n    static override PARTS = {\n        form: {\n          template: 'modules/dice-stats/templates/genericTemplate.hbs'\n        }\n    }\n\n    // getData(options) replacement\n    override async _prepareContext(options:any) {\n        const context:any = {};\n\n        // Be mindful of mutating other objects in memory when you enrich\n        context.customHeading = \"WOJO's Custom Heading\";\n\n        return context;\n    }\n\n    override _onRender(context:any, options:any): any {\n        this.element.querySelector(\"input[name=GenBtn]\")?.addEventListener(\"click\", MyGenericApplication.refresh);\n    }\n\n    static async refresh(){\n        await console.log(\"Dice Stats GenericApp On Refresh\");\n    }\n\n    static async #onSubmit(event:any, form:any, formData:any) {\n        // const settings = foundry.utils.expandObject(formData.object);\n        // await Promise.all(\n        //     Object.entries(settings)\n        //         .map(([key, value]) => (game as Game).settings.set(\"foo\", key, value))\n        // );\n        console.log(\"Dice Stats GenericApp On Submit!\");\n    }\n\n    // override _renderHTML(context:any, options:any): any{\n    //     super._renderHTML(context, options);\n    // }\n\n    // override _replaceHTML(result:any, context:any, options:any): any{\n    //     super._replaceHTML(result, context, options);\n    // }\n}","import { DieInfo } from \"./dice\";\n\nexport class GenericDataParser {\n    static parseMessageData(message: any): DieInfo[] | [] {\n\n        return []\n    }\n}","import { DIE_TYPE } from \"../constants\";\nimport { DiceStatsPlayer } from \"./player\";\nimport { MyGenericApplication } from \"../ui/forms/GenericForm\";\nimport { SystemDataFactory } from \"./systemData/systemDataFactory\";\nimport { DieInfo } from \"./genericData/dice\";\nimport { GenericSystemData } from \"./systemData/genericSystemData\";\nimport { GenericDataParser } from \"./genericData/genericDataParser\";\nimport { PlayerDataForm } from \"../ui/forms/playerDataForm\";\n\n/* Create a singleton DataModel Class */\nexport class DiceStatsDataModel {\n    private static _instance: DiceStatsDataModel;\n\n    static getInstance(): DiceStatsDataModel {\n        if (!DiceStatsDataModel._instance || DiceStatsDataModel._instance == undefined) {\n            DiceStatsDataModel._instance = new DiceStatsDataModel();\n        }\n        return DiceStatsDataModel._instance;\n    }\n\n    private constructor() {\n        //let id:core = 'dice-stats'\n        DiceStatsModuleSettings.registerSettings();\n\n        // TODO: Create Form Objects\n        this._settingsForm = new MyGenericApplication();\n        this._globalForm = new MyGenericApplication();\n        this._compareForm = new MyGenericApplication();\n\n        // Create Player Map\n\n\n    }\n\n    public loadPlayers(){\n        let UsersAry = (game as Game)?.users\n        let systemId = (game as Game).system.id\n        if (UsersAry) {\n            for (var user of UsersAry){\n                let playerObj = new DiceStatsPlayer(user._id, user.name, user.isGM, systemId);\n\n                this.diceStatsPlayerMap.set(user.name, playerObj);\n                this.diceStatsPlayerMap.set(user._id, playerObj);\n            }\n        }\n    }\n\n    // Update Player form to hold system templates\n    public setSystemTemplates(system_chart_tempalte:string, system_data_template:string){\n        PlayerDataForm.templates.systemChartTab = system_chart_tempalte;\n        PlayerDataForm.templates.systemDetailsTab = system_data_template;\n    }\n\n    /* ========================================================= */\n    static id:any = 'dice-stats';\n    private _isPaused = false;\n    private _settingsForm;\n    private _globalForm;\n    private _compareForm;\n    /*private _playerForms[]; Player forms are saved in the player specifc objects */\n    \n    /* Map: [PlayerName | UserID] => [DiceStatsPlayer Info] */\n    diceStatsPlayerMap: Map< string|number, DiceStatsPlayer> = new Map< string|number, DiceStatsPlayer>();\n    /* ========================================================= */\n\n    // Parse Foundry Message Object\n    public parseRollMessage(message: any){\n        // Are we paused saving data? or Is msg is not a roll?\n        if (this._isPaused || !message.isRoll){\n            return }\n        \n        // Get Player Associated With msg\n        // Player -> Parse System Data\n        // Player -> Parse Generic Data\n\n        /* ================================================== */\n        // Get author of message\n        let authorId = message.author.id;\n\n        // Get the player that the roll is associated with\n        let playerInfo:DiceStatsPlayer|undefined = this.diceStatsPlayerMap.get(authorId);\n\n        // Get the specific system parser to parse msg\n        let systemParser = SystemDataFactory.createSystemData((game as Game).system.id);\n        let systemInfo = systemParser.parseRollMessage(message);\n\n        let genericInfoAry:DieInfo[] = GenericDataParser.parseMessageData(message);\n        \n        if (playerInfo){\n            playerInfo.addGenericInfo(genericInfoAry);\n            playerInfo.addSystemInfo(systemInfo);\n        }\n\n        this.saveDataToDB();\n    }\n\n    /* ================= API FN's ==================== */\n    public openSettingsForm(isGM: boolean = false){\n        this._settingsForm?.render(true)\n    }\n\n    public openGlobalForm(isGM: boolean = false){\n        this._globalForm?.render(true)\n    }\n\n    public openCompareForm(isGM: boolean = false){\n        this._compareForm?.render(true)\n    }\n\n    public openPlayerForm(player_id:string=\"\", player_name=\"\", isGM: boolean = false){\n        if(player_id){\n            this.diceStatsPlayerMap.get(player_id)?.openPlayerForm()\n        }else if(player_name){\n            this.diceStatsPlayerMap.get(player_name)?.openPlayerForm()\n        }\n    }\n\n    public changePauseState(isGM: boolean = false){\n        this._isPaused = !this._isPaused;\n        return this._isPaused;\n    }\n    \n    public getIsPaused(){\n        return this._isPaused;\n    }\n\n    public saveRollValue(player_id:string, die_type:DIE_TYPE, die_value:number){\n        if (this._isPaused){\n            return}\n\n        var playerObj = this.diceStatsPlayerMap.get(player_id);\n        playerObj?.addRollData(die_value, die_type)\n    }\n\n    public saveDataToDB(){\n\n    }\n}\n\nexport class DiceStatsModuleSettings {\n    static settingsRegisterd = false;\n\n    static registerSettings(){\n        // Only register settings once\n        if (this.settingsRegisterd == true){\n            return;\n        }\n        this.settingsRegisterd = true;\n\n        // ---- Possible Settings ----\n        //      Setting                 Scope: World(Global) | Client       Default Value\n        // Plyr See Settings                    Global                          True\n        // Plyr See Global                      Global                          True\n        // Plyr See Compare                     Global                          True\n        // Plyr See GM                          Global                          True\n        // Plyr See Other Players               Global                          True\n        // Plyr See Self                        Global                          True\n        // Plyr Hide Blind Rolls                Global                          False\n\n        // Include GM In Global                 Global                          True\n        // Clear All On Login Popup             Global                          False\n\n        // \n        var players_see_gm:any = 'players_see_gm';\n        (game as Game).settings.register(DiceStatsDataModel.id, players_see_gm, {\n            name: `DiceStats.Settings.${players_see_gm}.Name`,\n            default: false,\n            type: Boolean,\n            scope: 'world',\n            config: true,\n            hint: `DiceStats.Settings.${players_see_gm}.Hint`\n            //restricted: true    // Restric item to gamemaster only \n            //Only used for non world lvl items. All World items are already gm only\n        })\n\n    }\n}","import { DiceStatsDataModel } from \"../../dataModel/dataModel\";\nimport { MyGenericApplication } from \"../forms/GenericForm\";\nimport { PlayerDataForm } from \"../forms/playerDataForm\";\n\nexport class CustomSceneControlToolSettings implements SceneControls.ToolNoToggle\n{\n    name = (game as Game).i18n?.localize('DiceStats.SceneControls.Settings.Name') ?? '';\n    title = (game as Game).i18n?.localize('DiceStats.SceneControls.Settings.Title') ?? '';\n    icon = 'fa-solid fa-gears';\n    order= 0;\n\n    visible= true;\n    active= false;\n    button= true;\n\n    async onChange(event:any, active:any){\n        DiceStatsDataModel.getInstance().openSettingsForm(true)\n        new MyGenericApplication().render()\n    }\n\n    constructor(){}\n    // TODO: Add pause and export functionalities to settings form\n    // Give desc of other settings info (Change icon setting here?)\n}\n\n// Global Scene Control Icon \nexport class CustomSceneControlToolGlobal implements SceneControls.ToolNoToggle\n{\n    active= false;\n    button= true;\n\n    name = (game as Game).i18n?.localize('DiceStats.SceneControls.GlobalStats.Name') ?? '';\n    title = (game as Game).i18n?.localize('DiceStats.SceneControls.GlobalStats.Title') ?? '';\n    icon = 'fa-solid fa-earth-americas';\n    order= 0;\n\n    visible= true;\n\n    async onChange(event:any, active:any){\n        DiceStatsDataModel.getInstance().openGlobalForm()\n    }\n    constructor(){}\n}\n\n// Compare Scene Control Icon\nexport class CustomSceneControlToolCompare implements SceneControls.ToolNoToggle\n{\n    active= false;\n    button= true;\n\n    name = (game as Game).i18n?.localize('DiceStats.SceneControls.CompareStats.Name') ?? '';\n    title = (game as Game).i18n?.localize('DiceStats.SceneControls.CompareStats.Title') ?? '';\n    icon = 'fa-solid fa-users-line';\n    order= 0;\n\n    visible= true;\n\n    async onChange(event:any, active:any){\n        DiceStatsDataModel.getInstance().openCompareForm()\n    }\n\n    constructor(){}\n}\n\n// Player Scene Control Icons (Icon can be customized in settings)\nexport class CustomSceneControlToolPlayer implements SceneControls.ToolNoToggle\n{\n    static app: MyGenericApplication| PlayerDataForm | undefined = undefined\n    active = false;\n    button = true;\n    icon = '';\n    name = '';\n    order = 0;\n    title = '';\n    visible = true;\n    associatedPlayerId = \"\";\n\n    async onChange(event:any, active:any){\n        // DiceStatsDataModel.getInstance().openPlayerForm(this.associatedPlayerId);\n\n        if (CustomSceneControlToolPlayer.app == undefined){\n            CustomSceneControlToolPlayer.app = new PlayerDataForm()\n        }\n        CustomSceneControlToolPlayer.app.render(true)\n        // CustomSceneControlToolPlayer.app.bringToFront()\n        // CustomSceneControlToolPlayer.app.maximize()\n    }\n\n    constructor(player_name:string, player_id:string, player_icon:string){\n        var isGM = (game as Game)?.users?.get(player_id)?.isGM ?? false;\n\n        this.name = player_name+'_name';\n        this.title = player_name;\n        this.associatedPlayerId = player_id;\n        if (isGM){\n            this.icon = 'fa-solid fa-book-open-reader'\n        }else if(player_icon){\n            this.icon = player_icon;\n        }else{\n            this.icon = 'fas fa-dice-d20'\n        }\n    }\n}\n","/**\n * These classes use the foundry SceneControll Classes to add a new set of buttons. The buttons are used to view players\n * dice stats. \n * \n * Button layout it as follows\n *  OPEN_DICE_STATS_BUTTONS\n *  - PAUSE STATS BUTTON\n *  - GLOBAL STATS BUTTON\n *  - COMPARE STATS BUTTON\n *  - EXPORT FORM BUTTON\n *  - PLAYER STATS BUTTON\n */\n\nimport { CustomSceneControlToolSettings, CustomSceneControlToolGlobal, CustomSceneControlToolCompare, CustomSceneControlToolPlayer } from \"./sceneControlTools\";\n\n// Scene Controller outer button to view player buttons\nexport class CustomSceneControl extends SceneControls\n{\n    //activeTool = '';\n    icon = 'fas fa-dice-d20';\n    name = 'dice-stats';\n    //title = (game as Game).i18n?.localize('DiceStats.SceneControls.DiceStatsSceneControl.Title') ?? 'Dice Stats';\n    layer = 'diceStats';\n    visible = true;\n    tools:any = {};\n    order=69;\n\n    // UUID of players\n    constructor(player_ids: [string, string][])\n    {\n        super()\n        var toolCount = 0\n\n        var settingsTool = new CustomSceneControlToolSettings()\n        settingsTool.order = ++toolCount\n        this.tools[settingsTool.name] = settingsTool\n\n\n        var globalTool = new CustomSceneControlToolGlobal()\n        globalTool.order = ++toolCount\n        this.tools[globalTool.name] = globalTool\n\n        var compareTool = new CustomSceneControlToolCompare()\n        compareTool.order = ++toolCount\n        this.tools[compareTool.name] = compareTool\n\n        \n\n        for (var [id,name] of player_ids){\n            var playerTool = new CustomSceneControlToolPlayer(name,id, \"fas fa-dice-d20\")\n            playerTool.order = ++toolCount;\n\n            this.tools[playerTool.name] = playerTool\n        }\n    }\n\n    async onChange(event:any, active:any){\n\n    }\n\n    override get title() {\n        return (game as Game).i18n?.localize('DiceStats.SceneControls.DiceStatsSceneControl.Title') ?? 'Dice Stats'\n    }\n\n    override get activeTool() {\n        return \"\"\n    }\n\n    \n}","// Do not remove this import. If you do Vite will think your styles are dead\n// code and not include them in the build output.\nimport \"../styles/style.scss\";\n// import DogBrowser from \"./apps/dogBrowser\";\nimport { moduleId } from \"./constants\";\nimport { DiceStatsDataModel } from \"./dataModel/dataModel\";\nimport { CustomSceneControl } from \"./ui/sceneControls/sceneControls\";\n// import { MyModule } from \"./types/types\";\n\n//let module: MyModule;\n\nHooks.once('init', () => {\n  console.log(`Initializing ${moduleId}`);\n  DiceStatsDataModel.getInstance();\n\n\n  // module = (game as Game).modules.get(moduleId) as MyModule;\n  // module.dogBrowser = new DogBrowser();\n  });\n\nHooks.once('ready', () => {\n  console.log('Scene Ready, We can load player data now!')\n  DiceStatsDataModel.getInstance().loadPlayers()\n});\n\n// Hooks.on(\"renderActorDirectory\", (_: Application, html: JQuery) => {\n//   const button = $(\n//     `<button class=\"cc-sidebar-button\" type=\"button\">🐶</button>`\n//   );\n//   button.on(\"click\", () => {\n//     module.dogBrowser.render(true);\n//   });\n//   html.find(\".directory-header .action-buttons\").append(button);\n// });\n\n// Hook to interact when scenecontrols get created Method used to have a better location to access player data\nHooks.on(\"getSceneControlButtons\", controls => {\n  \n  let playerIds = []\n  let playerKeys:[string,string] = ['',''];\n  \n  let users = (game as Game).users\n  if (users){\n    for (let user of users){\n      playerKeys[0] = user._id;\n      playerKeys[1] = user.name;\n      playerIds.push(playerKeys)\n    }\n  }\n\n  var customSceneCtrl = new CustomSceneControl(playerIds)\n\n  let key:any = 'dice-stats'\n  controls[key] = customSceneCtrl\n  \n});"],"names":["moduleId","id","NUM_DIE_TYPES","DIE_TYPE","DIE_TYPE2","STREAK_DIRECTION","Utils","die_type","err_string","DieInfo","__publicField","die_info","hasStreakInfo","hasSingleRoll","roll_value","total","value","numberOfRolls","sum","i","totalRolls","middleIndex","indxlValue","indexOfMax","maxValue","diceAry","GenericSystemData","system_info","message_obj","SystemDataFactory","system_id","ApplicationV2","DocumentSheetV2","HandlebarsApplicationMixin","_PlayerDataForm","playerId","options","context","_a","_PlayerDataForm_static","onSubmit_fn","event","form","formData","__privateAdd","__privateMethod","PlayerDataForm","DiceStatsPlayer","in_user_id","in_user_name","in_is_gm","dice_info","die","_MyGenericApplication","_MyGenericApplication_static","MyGenericApplication","GenericDataParser","message","_DiceStatsDataModel","DiceStatsModuleSettings","UsersAry","systemId","user","playerObj","system_chart_tempalte","system_data_template","authorId","playerInfo","systemInfo","genericInfoAry","isGM","player_id","player_name","_b","die_value","DiceStatsDataModel","players_see_gm","CustomSceneControlToolSettings","active","CustomSceneControlToolGlobal","CustomSceneControlToolCompare","_CustomSceneControlToolPlayer","player_icon","CustomSceneControlToolPlayer","CustomSceneControl","player_ids","toolCount","settingsTool","globalTool","compareTool","name","playerTool","controls","playerIds","playerKeys","users","customSceneCtrl","key"],"mappings":"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"}